
LCDDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000468  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000468  000004dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e1d  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ef  00000000  00000000  0000146d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000096c  00000000  00000000  00001d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  000026c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000514  00000000  00000000  00002888  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000991  00000000  00000000  00002d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  0000372d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 1a 02 	call	0x434	; 0x434 <main>
  7a:	0c 94 32 02 	jmp	0x464	; 0x464 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_vSetHighNibbleDirection>:
			PORTC |= (parData<<HALF_REGESTER_SIZE);
		break;
		
		case 'D':
			PORTD &= 0x0f;
			PORTD |= (parData<<HALF_REGESTER_SIZE);
  82:	82 34       	cpi	r24, 0x42	; 66
  84:	99 f0       	breq	.+38     	; 0xac <DIO_vSetHighNibbleDirection+0x2a>
  86:	18 f4       	brcc	.+6      	; 0x8e <DIO_vSetHighNibbleDirection+0xc>
  88:	81 34       	cpi	r24, 0x41	; 65
  8a:	31 f0       	breq	.+12     	; 0x98 <DIO_vSetHighNibbleDirection+0x16>
  8c:	08 95       	ret
  8e:	83 34       	cpi	r24, 0x43	; 67
  90:	b9 f0       	breq	.+46     	; 0xc0 <DIO_vSetHighNibbleDirection+0x3e>
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	f9 f0       	breq	.+62     	; 0xd4 <DIO_vSetHighNibbleDirection+0x52>
  96:	08 95       	ret
  98:	61 30       	cpi	r22, 0x01	; 1
  9a:	21 f4       	brne	.+8      	; 0xa4 <DIO_vSetHighNibbleDirection+0x22>
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	80 6f       	ori	r24, 0xF0	; 240
  a0:	8a bb       	out	0x1a, r24	; 26
  a2:	08 95       	ret
  a4:	8a b3       	in	r24, 0x1a	; 26
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret
  ac:	61 30       	cpi	r22, 0x01	; 1
  ae:	21 f4       	brne	.+8      	; 0xb8 <DIO_vSetHighNibbleDirection+0x36>
  b0:	87 b3       	in	r24, 0x17	; 23
  b2:	80 6f       	ori	r24, 0xF0	; 240
  b4:	87 bb       	out	0x17, r24	; 23
  b6:	08 95       	ret
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	87 bb       	out	0x17, r24	; 23
  be:	08 95       	ret
  c0:	61 30       	cpi	r22, 0x01	; 1
  c2:	21 f4       	brne	.+8      	; 0xcc <DIO_vSetHighNibbleDirection+0x4a>
  c4:	84 b3       	in	r24, 0x14	; 20
  c6:	80 6f       	ori	r24, 0xF0	; 240
  c8:	84 bb       	out	0x14, r24	; 20
  ca:	08 95       	ret
  cc:	84 b3       	in	r24, 0x14	; 20
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	84 bb       	out	0x14, r24	; 20
  d2:	08 95       	ret
  d4:	61 30       	cpi	r22, 0x01	; 1
  d6:	21 f4       	brne	.+8      	; 0xe0 <DIO_vSetHighNibbleDirection+0x5e>
  d8:	81 b3       	in	r24, 0x11	; 17
  da:	80 6f       	ori	r24, 0xF0	; 240
  dc:	81 bb       	out	0x11, r24	; 17
  de:	08 95       	ret
  e0:	81 b3       	in	r24, 0x11	; 17
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	81 bb       	out	0x11, r24	; 17
  e6:	08 95       	ret

000000e8 <DIO_vSetLowNibbleDirection>:
  e8:	82 34       	cpi	r24, 0x42	; 66
  ea:	99 f0       	breq	.+38     	; 0x112 <DIO_vSetLowNibbleDirection+0x2a>
  ec:	18 f4       	brcc	.+6      	; 0xf4 <DIO_vSetLowNibbleDirection+0xc>
  ee:	81 34       	cpi	r24, 0x41	; 65
  f0:	31 f0       	breq	.+12     	; 0xfe <DIO_vSetLowNibbleDirection+0x16>
  f2:	08 95       	ret
  f4:	83 34       	cpi	r24, 0x43	; 67
  f6:	b9 f0       	breq	.+46     	; 0x126 <DIO_vSetLowNibbleDirection+0x3e>
  f8:	84 34       	cpi	r24, 0x44	; 68
  fa:	f9 f0       	breq	.+62     	; 0x13a <DIO_vSetLowNibbleDirection+0x52>
  fc:	08 95       	ret
  fe:	61 30       	cpi	r22, 0x01	; 1
 100:	21 f4       	brne	.+8      	; 0x10a <DIO_vSetLowNibbleDirection+0x22>
 102:	8a b3       	in	r24, 0x1a	; 26
 104:	8f 60       	ori	r24, 0x0F	; 15
 106:	8a bb       	out	0x1a, r24	; 26
 108:	08 95       	ret
 10a:	8a b3       	in	r24, 0x1a	; 26
 10c:	80 7f       	andi	r24, 0xF0	; 240
 10e:	8a bb       	out	0x1a, r24	; 26
 110:	08 95       	ret
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	21 f4       	brne	.+8      	; 0x11e <DIO_vSetLowNibbleDirection+0x36>
 116:	87 b3       	in	r24, 0x17	; 23
 118:	8f 60       	ori	r24, 0x0F	; 15
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
 11e:	87 b3       	in	r24, 0x17	; 23
 120:	80 7f       	andi	r24, 0xF0	; 240
 122:	87 bb       	out	0x17, r24	; 23
 124:	08 95       	ret
 126:	61 30       	cpi	r22, 0x01	; 1
 128:	21 f4       	brne	.+8      	; 0x132 <DIO_vSetLowNibbleDirection+0x4a>
 12a:	84 b3       	in	r24, 0x14	; 20
 12c:	8f 60       	ori	r24, 0x0F	; 15
 12e:	84 bb       	out	0x14, r24	; 20
 130:	08 95       	ret
 132:	84 b3       	in	r24, 0x14	; 20
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	84 bb       	out	0x14, r24	; 20
 138:	08 95       	ret
 13a:	61 30       	cpi	r22, 0x01	; 1
 13c:	21 f4       	brne	.+8      	; 0x146 <DIO_vSetLowNibbleDirection+0x5e>
 13e:	81 b3       	in	r24, 0x11	; 17
 140:	8f 60       	ori	r24, 0x0F	; 15
 142:	81 bb       	out	0x11, r24	; 17
 144:	08 95       	ret
 146:	81 b3       	in	r24, 0x11	; 17
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <DIO_vWrite>:
 14e:	82 34       	cpi	r24, 0x42	; 66
 150:	19 f1       	breq	.+70     	; 0x198 <DIO_vWrite+0x4a>
 152:	18 f4       	brcc	.+6      	; 0x15a <DIO_vWrite+0xc>
 154:	81 34       	cpi	r24, 0x41	; 65
 156:	39 f0       	breq	.+14     	; 0x166 <DIO_vWrite+0x18>
 158:	08 95       	ret
 15a:	83 34       	cpi	r24, 0x43	; 67
 15c:	b1 f1       	breq	.+108    	; 0x1ca <DIO_vWrite+0x7c>
 15e:	84 34       	cpi	r24, 0x44	; 68
 160:	09 f4       	brne	.+2      	; 0x164 <DIO_vWrite+0x16>
 162:	4c c0       	rjmp	.+152    	; 0x1fc <DIO_vWrite+0xae>
 164:	08 95       	ret
 166:	61 30       	cpi	r22, 0x01	; 1
 168:	59 f4       	brne	.+22     	; 0x180 <DIO_vWrite+0x32>
 16a:	2b b3       	in	r18, 0x1b	; 27
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_vWrite+0x28>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	4a 95       	dec	r20
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_vWrite+0x24>
 17a:	82 2b       	or	r24, r18
 17c:	8b bb       	out	0x1b, r24	; 27
 17e:	08 95       	ret
 180:	2b b3       	in	r18, 0x1b	; 27
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vWrite+0x3e>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	4a 95       	dec	r20
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vWrite+0x3a>
 190:	80 95       	com	r24
 192:	82 23       	and	r24, r18
 194:	8b bb       	out	0x1b, r24	; 27
 196:	08 95       	ret
 198:	61 30       	cpi	r22, 0x01	; 1
 19a:	59 f4       	brne	.+22     	; 0x1b2 <DIO_vWrite+0x64>
 19c:	28 b3       	in	r18, 0x18	; 24
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_vWrite+0x5a>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	4a 95       	dec	r20
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_vWrite+0x56>
 1ac:	82 2b       	or	r24, r18
 1ae:	88 bb       	out	0x18, r24	; 24
 1b0:	08 95       	ret
 1b2:	28 b3       	in	r18, 0x18	; 24
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_vWrite+0x70>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	4a 95       	dec	r20
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_vWrite+0x6c>
 1c2:	80 95       	com	r24
 1c4:	82 23       	and	r24, r18
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	08 95       	ret
 1ca:	61 30       	cpi	r22, 0x01	; 1
 1cc:	59 f4       	brne	.+22     	; 0x1e4 <DIO_vWrite+0x96>
 1ce:	25 b3       	in	r18, 0x15	; 21
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_vWrite+0x8c>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	4a 95       	dec	r20
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_vWrite+0x88>
 1de:	82 2b       	or	r24, r18
 1e0:	85 bb       	out	0x15, r24	; 21
 1e2:	08 95       	ret
 1e4:	25 b3       	in	r18, 0x15	; 21
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_vWrite+0xa2>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	4a 95       	dec	r20
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_vWrite+0x9e>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	85 bb       	out	0x15, r24	; 21
 1fa:	08 95       	ret
 1fc:	61 30       	cpi	r22, 0x01	; 1
 1fe:	59 f4       	brne	.+22     	; 0x216 <DIO_vWrite+0xc8>
 200:	22 b3       	in	r18, 0x12	; 18
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_vWrite+0xbe>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	4a 95       	dec	r20
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_vWrite+0xba>
 210:	82 2b       	or	r24, r18
 212:	82 bb       	out	0x12, r24	; 18
 214:	08 95       	ret
 216:	22 b3       	in	r18, 0x12	; 18
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_vWrite+0xd4>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	4a 95       	dec	r20
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_vWrite+0xd0>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	82 bb       	out	0x12, r24	; 18
 22c:	08 95       	ret

0000022e <DIO_vSetPort>:
	}
	
}

void DIO_vSetPort(uint8 PortName){
	switch (PortName)
 22e:	82 34       	cpi	r24, 0x42	; 66
 230:	61 f0       	breq	.+24     	; 0x24a <DIO_vSetPort+0x1c>
 232:	18 f4       	brcc	.+6      	; 0x23a <DIO_vSetPort+0xc>
 234:	81 34       	cpi	r24, 0x41	; 65
 236:	31 f0       	breq	.+12     	; 0x244 <DIO_vSetPort+0x16>
 238:	08 95       	ret
 23a:	83 34       	cpi	r24, 0x43	; 67
 23c:	49 f0       	breq	.+18     	; 0x250 <DIO_vSetPort+0x22>
 23e:	84 34       	cpi	r24, 0x44	; 68
 240:	51 f0       	breq	.+20     	; 0x256 <DIO_vSetPort+0x28>
 242:	08 95       	ret
	{
		case 'A':
		PORTA = 0xff;
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	8b bb       	out	0x1b, r24	; 27
		break;
 248:	08 95       	ret
		case 'B':
		PORTB = 0xff;
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	88 bb       	out	0x18, r24	; 24
		break;
 24e:	08 95       	ret
		case 'C':
		PORTC = 0xff;
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	85 bb       	out	0x15, r24	; 21
		break;
 254:	08 95       	ret
		case 'D':
		PORTD = 0xff;
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	82 bb       	out	0x12, r24	; 18
 25a:	08 95       	ret

0000025c <keyPad_vIntial>:
#include "KeyPadDriver.h"


void keyPad_vIntial(void){
	DIO_vSetHighNibbleDirection(KEY_PAD_DDR,0);
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	83 e4       	ldi	r24, 0x43	; 67
 260:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vSetHighNibbleDirection>
	DIO_vSetLowNibbleDirection(KEY_PAD_DDR,1);
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	83 e4       	ldi	r24, 0x43	; 67
 268:	0e 94 74 00 	call	0xe8	; 0xe8 <DIO_vSetLowNibbleDirection>
	DIO_vSetPort(KEY_PAD_PORT);
 26c:	83 e4       	ldi	r24, 0x43	; 67
 26e:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_vSetPort>
 272:	08 95       	ret

00000274 <keyPad_vScan>:
}
uint8 keyPad_vScan(void){
 274:	ef 92       	push	r14
 276:	ff 92       	push	r15
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	60 97       	sbiw	r28, 0x10	; 16
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
	int rows,col;
	const char arr[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 290:	80 e1       	ldi	r24, 0x10	; 16
 292:	e0 e6       	ldi	r30, 0x60	; 96
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	de 01       	movw	r26, r28
 298:	11 96       	adiw	r26, 0x01	; 1
 29a:	01 90       	ld	r0, Z+
 29c:	0d 92       	st	X+, r0
 29e:	8a 95       	dec	r24
 2a0:	e1 f7       	brne	.-8      	; 0x29a <keyPad_vScan+0x26>
	for(rows = 0;rows<=3 ;rows ++)
 2a2:	e1 2c       	mov	r14, r1
 2a4:	f1 2c       	mov	r15, r1
	{
		// put it as macros for putting port pins  to 1 ? as it deals directly with micro controller
		DIO_vSetPort(KEY_PAD_PORT);
		CLR_BIT(PORTC,rows);
 2a6:	01 e0       	ldi	r16, 0x01	; 1
 2a8:	10 e0       	ldi	r17, 0x00	; 0
	int rows,col;
	const char arr[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	for(rows = 0;rows<=3 ;rows ++)
	{
		// put it as macros for putting port pins  to 1 ? as it deals directly with micro controller
		DIO_vSetPort(KEY_PAD_PORT);
 2aa:	83 e4       	ldi	r24, 0x43	; 67
 2ac:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_vSetPort>
		CLR_BIT(PORTC,rows);
 2b0:	95 b3       	in	r25, 0x15	; 21
 2b2:	98 01       	movw	r18, r16
 2b4:	0e 2c       	mov	r0, r14
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <keyPad_vScan+0x48>
 2b8:	22 0f       	add	r18, r18
 2ba:	33 1f       	adc	r19, r19
 2bc:	0a 94       	dec	r0
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <keyPad_vScan+0x44>
 2c0:	82 2f       	mov	r24, r18
 2c2:	80 95       	com	r24
 2c4:	89 23       	and	r24, r25
 2c6:	85 bb       	out	0x15, r24	; 21
		for(col = 4;col<=7;col++)
		{
			
			if(0 == READ_BIT(KEY_PAD_PIN,col)){
 2c8:	9c 9b       	sbis	0x13, 4	; 19
 2ca:	0d c0       	rjmp	.+26     	; 0x2e6 <keyPad_vScan+0x72>
 2cc:	25 e0       	ldi	r18, 0x05	; 5
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	83 b3       	in	r24, 0x13	; 19
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <keyPad_vScan+0x68>
 2d8:	95 95       	asr	r25
 2da:	87 95       	ror	r24
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <keyPad_vScan+0x64>
 2e0:	80 fd       	sbrc	r24, 0
 2e2:	14 c0       	rjmp	.+40     	; 0x30c <keyPad_vScan+0x98>
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <keyPad_vScan+0x76>
	for(rows = 0;rows<=3 ;rows ++)
	{
		// put it as macros for putting port pins  to 1 ? as it deals directly with micro controller
		DIO_vSetPort(KEY_PAD_PORT);
		CLR_BIT(PORTC,rows);
		for(col = 4;col<=7;col++)
 2e6:	24 e0       	ldi	r18, 0x04	; 4
 2e8:	30 e0       	ldi	r19, 0x00	; 0
		{
			
			if(0 == READ_BIT(KEY_PAD_PIN,col)){
					
					return arr[rows][col-4];
 2ea:	f7 01       	movw	r30, r14
 2ec:	ee 0f       	add	r30, r30
 2ee:	ff 1f       	adc	r31, r31
 2f0:	ee 0f       	add	r30, r30
 2f2:	ff 1f       	adc	r31, r31
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	8c 0f       	add	r24, r28
 2fa:	9d 1f       	adc	r25, r29
 2fc:	e8 0f       	add	r30, r24
 2fe:	f9 1f       	adc	r31, r25
 300:	2e 0f       	add	r18, r30
 302:	3f 1f       	adc	r19, r31
 304:	f9 01       	movw	r30, r18
 306:	34 97       	sbiw	r30, 0x04	; 4
 308:	80 81       	ld	r24, Z
 30a:	0d c0       	rjmp	.+26     	; 0x326 <keyPad_vScan+0xb2>
	for(rows = 0;rows<=3 ;rows ++)
	{
		// put it as macros for putting port pins  to 1 ? as it deals directly with micro controller
		DIO_vSetPort(KEY_PAD_PORT);
		CLR_BIT(PORTC,rows);
		for(col = 4;col<=7;col++)
 30c:	2f 5f       	subi	r18, 0xFF	; 255
 30e:	3f 4f       	sbci	r19, 0xFF	; 255
 310:	28 30       	cpi	r18, 0x08	; 8
 312:	31 05       	cpc	r19, r1
 314:	e9 f6       	brne	.-70     	; 0x2d0 <keyPad_vScan+0x5c>
	DIO_vSetPort(KEY_PAD_PORT);
}
uint8 keyPad_vScan(void){
	int rows,col;
	const char arr[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	for(rows = 0;rows<=3 ;rows ++)
 316:	9f ef       	ldi	r25, 0xFF	; 255
 318:	e9 1a       	sub	r14, r25
 31a:	f9 0a       	sbc	r15, r25
 31c:	84 e0       	ldi	r24, 0x04	; 4
 31e:	e8 16       	cp	r14, r24
 320:	f1 04       	cpc	r15, r1
 322:	19 f6       	brne	.-122    	; 0x2aa <keyPad_vScan+0x36>
			}
		}
		
	}
	
	return NO_PRESS;
 324:	8f ef       	ldi	r24, 0xFF	; 255
 326:	60 96       	adiw	r28, 0x10	; 16
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	f8 94       	cli
 32c:	de bf       	out	0x3e, r29	; 62
 32e:	0f be       	out	0x3f, r0	; 63
 330:	cd bf       	out	0x3d, r28	; 61
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	ff 90       	pop	r15
 33c:	ef 90       	pop	r14
 33e:	08 95       	ret

00000340 <setFallingEdge>:
	while(*parStr)
	{
		LCD_vPrintChar(*parStr);
		parStr++;
	}
}
 340:	43 e0       	ldi	r20, 0x03	; 3
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	82 e4       	ldi	r24, 0x42	; 66
 346:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vWrite>
 34a:	87 ee       	ldi	r24, 0xE7	; 231
 34c:	93 e0       	ldi	r25, 0x03	; 3
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <setFallingEdge+0xe>
 352:	00 c0       	rjmp	.+0      	; 0x354 <setFallingEdge+0x14>
 354:	00 00       	nop
 356:	43 e0       	ldi	r20, 0x03	; 3
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	82 e4       	ldi	r24, 0x42	; 66
 35c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_vWrite>
 360:	87 ee       	ldi	r24, 0xE7	; 231
 362:	93 e0       	ldi	r25, 0x03	; 3
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <setFallingEdge+0x24>
 368:	00 c0       	rjmp	.+0      	; 0x36a <setFallingEdge+0x2a>
 36a:	00 00       	nop
 36c:	08 95       	ret

0000036e <LCD_vSendCmd>:
 36e:	cf 93       	push	r28
 370:	c8 2f       	mov	r28, r24
 372:	c1 98       	cbi	0x18, 1	; 24
 374:	8b b3       	in	r24, 0x1b	; 27
 376:	8f 70       	andi	r24, 0x0F	; 15
 378:	8b bb       	out	0x1b, r24	; 27
 37a:	8b b3       	in	r24, 0x1b	; 27
 37c:	9c 2f       	mov	r25, r28
 37e:	90 7f       	andi	r25, 0xF0	; 240
 380:	89 2b       	or	r24, r25
 382:	8b bb       	out	0x1b, r24	; 27
 384:	0e 94 a0 01 	call	0x340	; 0x340 <setFallingEdge>
 388:	8b b3       	in	r24, 0x1b	; 27
 38a:	8f 70       	andi	r24, 0x0F	; 15
 38c:	8b bb       	out	0x1b, r24	; 27
 38e:	2b b3       	in	r18, 0x1b	; 27
 390:	30 e1       	ldi	r19, 0x10	; 16
 392:	c3 9f       	mul	r28, r19
 394:	c0 01       	movw	r24, r0
 396:	11 24       	eor	r1, r1
 398:	82 2b       	or	r24, r18
 39a:	8b bb       	out	0x1b, r24	; 27
 39c:	0e 94 a0 01 	call	0x340	; 0x340 <setFallingEdge>
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <LCD_vInit>:
 3a4:	8a b3       	in	r24, 0x1a	; 26
 3a6:	80 6f       	ori	r24, 0xF0	; 240
 3a8:	8a bb       	out	0x1a, r24	; 26
 3aa:	87 b3       	in	r24, 0x17	; 23
 3ac:	8e 60       	ori	r24, 0x0E	; 14
 3ae:	87 bb       	out	0x17, r24	; 23
 3b0:	c2 98       	cbi	0x18, 2	; 24
 3b2:	83 e3       	ldi	r24, 0x33	; 51
 3b4:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_vSendCmd>
 3b8:	82 e3       	ldi	r24, 0x32	; 50
 3ba:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_vSendCmd>
 3be:	88 e2       	ldi	r24, 0x28	; 40
 3c0:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_vSendCmd>
 3c4:	8f e0       	ldi	r24, 0x0F	; 15
 3c6:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_vSendCmd>
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_vSendCmd>
 3d0:	87 e8       	ldi	r24, 0x87	; 135
 3d2:	93 e1       	ldi	r25, 0x13	; 19
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <LCD_vInit+0x30>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <LCD_vInit+0x36>
 3da:	00 00       	nop
 3dc:	08 95       	ret

000003de <LCD_vPrintChar>:
 3de:	cf 93       	push	r28
 3e0:	c8 2f       	mov	r28, r24
 3e2:	c1 9a       	sbi	0x18, 1	; 24
 3e4:	8b b3       	in	r24, 0x1b	; 27
 3e6:	8f 70       	andi	r24, 0x0F	; 15
 3e8:	8b bb       	out	0x1b, r24	; 27
 3ea:	8b b3       	in	r24, 0x1b	; 27
 3ec:	9c 2f       	mov	r25, r28
 3ee:	90 7f       	andi	r25, 0xF0	; 240
 3f0:	89 2b       	or	r24, r25
 3f2:	8b bb       	out	0x1b, r24	; 27
 3f4:	0e 94 a0 01 	call	0x340	; 0x340 <setFallingEdge>
 3f8:	8b b3       	in	r24, 0x1b	; 27
 3fa:	8f 70       	andi	r24, 0x0F	; 15
 3fc:	8b bb       	out	0x1b, r24	; 27
 3fe:	2b b3       	in	r18, 0x1b	; 27
 400:	30 e1       	ldi	r19, 0x10	; 16
 402:	c3 9f       	mul	r28, r19
 404:	c0 01       	movw	r24, r0
 406:	11 24       	eor	r1, r1
 408:	82 2b       	or	r24, r18
 40a:	8b bb       	out	0x1b, r24	; 27
 40c:	0e 94 a0 01 	call	0x340	; 0x340 <setFallingEdge>
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <LCD_vMoveCursir>:

#endif

void LCD_vMoveCursir(unsigned char row,unsigned char col){
	char temp;
	if((row < 2) && (col < 16))
 414:	82 30       	cpi	r24, 0x02	; 2
 416:	68 f4       	brcc	.+26     	; 0x432 <LCD_vMoveCursir+0x1e>
 418:	60 31       	cpi	r22, 0x10	; 16
 41a:	58 f4       	brcc	.+22     	; 0x432 <LCD_vMoveCursir+0x1e>
	{
		if(row == 0)
 41c:	81 11       	cpse	r24, r1
 41e:	05 c0       	rjmp	.+10     	; 0x42a <LCD_vMoveCursir+0x16>
		{
			temp = 0x80 + col;
			LCD_vSendCmd(temp);
 420:	80 e8       	ldi	r24, 0x80	; 128
 422:	86 0f       	add	r24, r22
 424:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_vSendCmd>
 428:	08 95       	ret
		}
		else
		{
			temp = 0xc0 + col;
			LCD_vSendCmd(temp);
 42a:	80 ec       	ldi	r24, 0xC0	; 192
 42c:	86 0f       	add	r24, r22
 42e:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_vSendCmd>
 432:	08 95       	ret

00000434 <main>:

#include "KeyPadDriver.h"
#include "LCD.h"
int main(void)
{
	keyPad_vIntial();
 434:	0e 94 2e 01 	call	0x25c	; 0x25c <keyPad_vIntial>
	
	LCD_vInit();
 438:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_vInit>
	LCD_vMoveCursir(0,1);
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_vMoveCursir>
    
	/* Replace with your application code */
    while (1) 
    {
			uint8 x = keyPad_vScan();
 444:	0e 94 3a 01 	call	0x274	; 0x274 <keyPad_vScan>
			if (NO_PRESS != x)
 448:	8f 3f       	cpi	r24, 0xFF	; 255
 44a:	e1 f3       	breq	.-8      	; 0x444 <main+0x10>
			{	
				LCD_vPrintChar(x);	
 44c:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_vPrintChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 450:	2f ef       	ldi	r18, 0xFF	; 255
 452:	89 ef       	ldi	r24, 0xF9	; 249
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	21 50       	subi	r18, 0x01	; 1
 458:	80 40       	sbci	r24, 0x00	; 0
 45a:	90 40       	sbci	r25, 0x00	; 0
 45c:	e1 f7       	brne	.-8      	; 0x456 <main+0x22>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <main+0x2c>
 460:	00 00       	nop
 462:	f0 cf       	rjmp	.-32     	; 0x444 <main+0x10>

00000464 <_exit>:
 464:	f8 94       	cli

00000466 <__stop_program>:
 466:	ff cf       	rjmp	.-2      	; 0x466 <__stop_program>
