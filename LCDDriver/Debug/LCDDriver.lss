
LCDDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000003c2  00000436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c8b  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000734  00000000  00000000  000011f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000067c  00000000  00000000  00001927  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b8  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007be  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002d62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <main>
  7a:	0c 94 df 01 	jmp	0x3be	; 0x3be <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_vSetHighNibbleDirection>:
		case 'C':
			PORTC = parData;
		break;
		
		case 'D':
			PORTD = parData;
  82:	82 34       	cpi	r24, 0x42	; 66
  84:	71 f0       	breq	.+28     	; 0xa2 <DIO_vSetHighNibbleDirection+0x20>
  86:	18 f4       	brcc	.+6      	; 0x8e <DIO_vSetHighNibbleDirection+0xc>
  88:	81 34       	cpi	r24, 0x41	; 65
  8a:	31 f0       	breq	.+12     	; 0x98 <DIO_vSetHighNibbleDirection+0x16>
  8c:	08 95       	ret
  8e:	83 34       	cpi	r24, 0x43	; 67
  90:	69 f0       	breq	.+26     	; 0xac <DIO_vSetHighNibbleDirection+0x2a>
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	81 f0       	breq	.+32     	; 0xb6 <DIO_vSetHighNibbleDirection+0x34>
  96:	08 95       	ret
  98:	8a b3       	in	r24, 0x1a	; 26
  9a:	60 7f       	andi	r22, 0xF0	; 240
  9c:	68 2b       	or	r22, r24
  9e:	6a bb       	out	0x1a, r22	; 26
  a0:	08 95       	ret
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	60 7f       	andi	r22, 0xF0	; 240
  a6:	68 2b       	or	r22, r24
  a8:	67 bb       	out	0x17, r22	; 23
  aa:	08 95       	ret
  ac:	84 b3       	in	r24, 0x14	; 20
  ae:	60 7f       	andi	r22, 0xF0	; 240
  b0:	68 2b       	or	r22, r24
  b2:	64 bb       	out	0x14, r22	; 20
  b4:	08 95       	ret
  b6:	81 b3       	in	r24, 0x11	; 17
  b8:	60 7f       	andi	r22, 0xF0	; 240
  ba:	68 2b       	or	r22, r24
  bc:	61 bb       	out	0x11, r22	; 17
  be:	08 95       	ret

000000c0 <DIO_vSetLowNibbleDirection>:
  c0:	82 34       	cpi	r24, 0x42	; 66
  c2:	71 f0       	breq	.+28     	; 0xe0 <DIO_vSetLowNibbleDirection+0x20>
  c4:	18 f4       	brcc	.+6      	; 0xcc <DIO_vSetLowNibbleDirection+0xc>
  c6:	81 34       	cpi	r24, 0x41	; 65
  c8:	31 f0       	breq	.+12     	; 0xd6 <DIO_vSetLowNibbleDirection+0x16>
  ca:	08 95       	ret
  cc:	83 34       	cpi	r24, 0x43	; 67
  ce:	69 f0       	breq	.+26     	; 0xea <DIO_vSetLowNibbleDirection+0x2a>
  d0:	84 34       	cpi	r24, 0x44	; 68
  d2:	81 f0       	breq	.+32     	; 0xf4 <DIO_vSetLowNibbleDirection+0x34>
  d4:	08 95       	ret
  d6:	8a b3       	in	r24, 0x1a	; 26
  d8:	6f 70       	andi	r22, 0x0F	; 15
  da:	68 2b       	or	r22, r24
  dc:	6a bb       	out	0x1a, r22	; 26
  de:	08 95       	ret
  e0:	87 b3       	in	r24, 0x17	; 23
  e2:	6f 70       	andi	r22, 0x0F	; 15
  e4:	68 2b       	or	r22, r24
  e6:	67 bb       	out	0x17, r22	; 23
  e8:	08 95       	ret
  ea:	84 b3       	in	r24, 0x14	; 20
  ec:	6f 70       	andi	r22, 0x0F	; 15
  ee:	68 2b       	or	r22, r24
  f0:	64 bb       	out	0x14, r22	; 20
  f2:	08 95       	ret
  f4:	81 b3       	in	r24, 0x11	; 17
  f6:	6f 70       	andi	r22, 0x0F	; 15
  f8:	68 2b       	or	r22, r24
  fa:	61 bb       	out	0x11, r22	; 17
  fc:	08 95       	ret

000000fe <DIO_vWrite>:
  fe:	82 34       	cpi	r24, 0x42	; 66
 100:	19 f1       	breq	.+70     	; 0x148 <DIO_vWrite+0x4a>
 102:	18 f4       	brcc	.+6      	; 0x10a <DIO_vWrite+0xc>
 104:	81 34       	cpi	r24, 0x41	; 65
 106:	39 f0       	breq	.+14     	; 0x116 <DIO_vWrite+0x18>
 108:	08 95       	ret
 10a:	83 34       	cpi	r24, 0x43	; 67
 10c:	b1 f1       	breq	.+108    	; 0x17a <DIO_vWrite+0x7c>
 10e:	84 34       	cpi	r24, 0x44	; 68
 110:	09 f4       	brne	.+2      	; 0x114 <DIO_vWrite+0x16>
 112:	4c c0       	rjmp	.+152    	; 0x1ac <DIO_vWrite+0xae>
 114:	08 95       	ret
 116:	61 30       	cpi	r22, 0x01	; 1
 118:	59 f4       	brne	.+22     	; 0x130 <DIO_vWrite+0x32>
 11a:	2b b3       	in	r18, 0x1b	; 27
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_vWrite+0x28>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	4a 95       	dec	r20
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_vWrite+0x24>
 12a:	82 2b       	or	r24, r18
 12c:	8b bb       	out	0x1b, r24	; 27
 12e:	08 95       	ret
 130:	2b b3       	in	r18, 0x1b	; 27
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_vWrite+0x3e>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	4a 95       	dec	r20
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_vWrite+0x3a>
 140:	80 95       	com	r24
 142:	82 23       	and	r24, r18
 144:	8b bb       	out	0x1b, r24	; 27
 146:	08 95       	ret
 148:	61 30       	cpi	r22, 0x01	; 1
 14a:	59 f4       	brne	.+22     	; 0x162 <DIO_vWrite+0x64>
 14c:	28 b3       	in	r18, 0x18	; 24
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_vWrite+0x5a>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	4a 95       	dec	r20
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_vWrite+0x56>
 15c:	82 2b       	or	r24, r18
 15e:	88 bb       	out	0x18, r24	; 24
 160:	08 95       	ret
 162:	28 b3       	in	r18, 0x18	; 24
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_vWrite+0x70>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	4a 95       	dec	r20
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_vWrite+0x6c>
 172:	80 95       	com	r24
 174:	82 23       	and	r24, r18
 176:	88 bb       	out	0x18, r24	; 24
 178:	08 95       	ret
 17a:	61 30       	cpi	r22, 0x01	; 1
 17c:	59 f4       	brne	.+22     	; 0x194 <DIO_vWrite+0x96>
 17e:	25 b3       	in	r18, 0x15	; 21
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vWrite+0x8c>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	4a 95       	dec	r20
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vWrite+0x88>
 18e:	82 2b       	or	r24, r18
 190:	85 bb       	out	0x15, r24	; 21
 192:	08 95       	ret
 194:	25 b3       	in	r18, 0x15	; 21
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_vWrite+0xa2>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	4a 95       	dec	r20
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_vWrite+0x9e>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	85 bb       	out	0x15, r24	; 21
 1aa:	08 95       	ret
 1ac:	61 30       	cpi	r22, 0x01	; 1
 1ae:	59 f4       	brne	.+22     	; 0x1c6 <DIO_vWrite+0xc8>
 1b0:	22 b3       	in	r18, 0x12	; 18
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_vWrite+0xbe>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	4a 95       	dec	r20
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_vWrite+0xba>
 1c0:	82 2b       	or	r24, r18
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	08 95       	ret
 1c6:	22 b3       	in	r18, 0x12	; 18
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_vWrite+0xd4>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	4a 95       	dec	r20
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_vWrite+0xd0>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	82 bb       	out	0x12, r24	; 18
 1dc:	08 95       	ret

000001de <DIO_vSetHighNibblePortWithHighNibbleData>:
	}
}

void DIO_vSetHighNibblePortWithHighNibbleData(uint8 parPortName,uint8 parData)
{
 switch(parPortName)
 1de:	82 34       	cpi	r24, 0x42	; 66
 1e0:	89 f0       	breq	.+34     	; 0x204 <DIO_vSetHighNibblePortWithHighNibbleData+0x26>
 1e2:	18 f4       	brcc	.+6      	; 0x1ea <DIO_vSetHighNibblePortWithHighNibbleData+0xc>
 1e4:	81 34       	cpi	r24, 0x41	; 65
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <DIO_vSetHighNibblePortWithHighNibbleData+0x16>
 1e8:	08 95       	ret
 1ea:	83 34       	cpi	r24, 0x43	; 67
 1ec:	99 f0       	breq	.+38     	; 0x214 <DIO_vSetHighNibblePortWithHighNibbleData+0x36>
 1ee:	84 34       	cpi	r24, 0x44	; 68
 1f0:	c9 f0       	breq	.+50     	; 0x224 <DIO_vSetHighNibblePortWithHighNibbleData+0x46>
 1f2:	08 95       	ret
 {
	 case 'A':
		 PORTA &= 0x0f;
 1f4:	8b b3       	in	r24, 0x1b	; 27
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	8b bb       	out	0x1b, r24	; 27
		 PORTA |= parData & 0xf0;	 
 1fa:	8b b3       	in	r24, 0x1b	; 27
 1fc:	60 7f       	andi	r22, 0xF0	; 240
 1fe:	68 2b       	or	r22, r24
 200:	6b bb       	out	0x1b, r22	; 27
	 break;
 202:	08 95       	ret
	 
	 case 'B':
		 PORTB &= 0x0f;
 204:	88 b3       	in	r24, 0x18	; 24
 206:	8f 70       	andi	r24, 0x0F	; 15
 208:	88 bb       	out	0x18, r24	; 24
		 PORTB |= parData & 0xf0;
 20a:	88 b3       	in	r24, 0x18	; 24
 20c:	60 7f       	andi	r22, 0xF0	; 240
 20e:	68 2b       	or	r22, r24
 210:	68 bb       	out	0x18, r22	; 24
	 
	 break;
 212:	08 95       	ret
	 
	 case 'C':
		PORTC &= 0x0f;
 214:	85 b3       	in	r24, 0x15	; 21
 216:	8f 70       	andi	r24, 0x0F	; 15
 218:	85 bb       	out	0x15, r24	; 21
		PORTC |= parData & 0xf0;
 21a:	85 b3       	in	r24, 0x15	; 21
 21c:	60 7f       	andi	r22, 0xF0	; 240
 21e:	68 2b       	or	r22, r24
 220:	65 bb       	out	0x15, r22	; 21
	 break;
 222:	08 95       	ret
	 
	 case 'D':
		PORTD &= 0x0f;
 224:	82 b3       	in	r24, 0x12	; 18
 226:	8f 70       	andi	r24, 0x0F	; 15
 228:	82 bb       	out	0x12, r24	; 18
		PORTD |= parData & 0xf0;
 22a:	82 b3       	in	r24, 0x12	; 18
 22c:	60 7f       	andi	r22, 0xF0	; 240
 22e:	68 2b       	or	r22, r24
 230:	62 bb       	out	0x12, r22	; 18
 232:	08 95       	ret

00000234 <DIO_vSetHighNibblePortWithLowNibbleData>:
 }	
}

void DIO_vSetHighNibblePortWithLowNibbleData(uint8 parPortName,uint8 parData)
{
	switch(parPortName)
 234:	82 34       	cpi	r24, 0x42	; 66
 236:	a1 f0       	breq	.+40     	; 0x260 <DIO_vSetHighNibblePortWithLowNibbleData+0x2c>
 238:	18 f4       	brcc	.+6      	; 0x240 <DIO_vSetHighNibblePortWithLowNibbleData+0xc>
 23a:	81 34       	cpi	r24, 0x41	; 65
 23c:	31 f0       	breq	.+12     	; 0x24a <DIO_vSetHighNibblePortWithLowNibbleData+0x16>
 23e:	08 95       	ret
 240:	83 34       	cpi	r24, 0x43	; 67
 242:	c9 f0       	breq	.+50     	; 0x276 <DIO_vSetHighNibblePortWithLowNibbleData+0x42>
 244:	84 34       	cpi	r24, 0x44	; 68
 246:	11 f1       	breq	.+68     	; 0x28c <DIO_vSetHighNibblePortWithLowNibbleData+0x58>
 248:	08 95       	ret
	{
		case 'A':
			PORTA &= 0x0f;
 24a:	8b b3       	in	r24, 0x1b	; 27
 24c:	8f 70       	andi	r24, 0x0F	; 15
 24e:	8b bb       	out	0x1b, r24	; 27
			PORTA |= (parData<<HALF_REGESTER_SIZE);
 250:	8b b3       	in	r24, 0x1b	; 27
 252:	90 e1       	ldi	r25, 0x10	; 16
 254:	69 9f       	mul	r22, r25
 256:	b0 01       	movw	r22, r0
 258:	11 24       	eor	r1, r1
 25a:	68 2b       	or	r22, r24
 25c:	6b bb       	out	0x1b, r22	; 27
		break;
 25e:	08 95       	ret
		
	    case 'B':
			PORTB &= 0x0f;
 260:	88 b3       	in	r24, 0x18	; 24
 262:	8f 70       	andi	r24, 0x0F	; 15
 264:	88 bb       	out	0x18, r24	; 24
			PORTB |= (parData<<HALF_REGESTER_SIZE);
 266:	88 b3       	in	r24, 0x18	; 24
 268:	90 e1       	ldi	r25, 0x10	; 16
 26a:	69 9f       	mul	r22, r25
 26c:	b0 01       	movw	r22, r0
 26e:	11 24       	eor	r1, r1
 270:	68 2b       	or	r22, r24
 272:	68 bb       	out	0x18, r22	; 24
		break;
 274:	08 95       	ret
		
		case 'C':
			PORTC &= 0x0f;
 276:	85 b3       	in	r24, 0x15	; 21
 278:	8f 70       	andi	r24, 0x0F	; 15
 27a:	85 bb       	out	0x15, r24	; 21
			PORTC |= (parData<<HALF_REGESTER_SIZE);
 27c:	85 b3       	in	r24, 0x15	; 21
 27e:	90 e1       	ldi	r25, 0x10	; 16
 280:	69 9f       	mul	r22, r25
 282:	b0 01       	movw	r22, r0
 284:	11 24       	eor	r1, r1
 286:	68 2b       	or	r22, r24
 288:	65 bb       	out	0x15, r22	; 21
		break;
 28a:	08 95       	ret
		
		case 'D':
			PORTD &= 0x0f;
 28c:	82 b3       	in	r24, 0x12	; 18
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	82 bb       	out	0x12, r24	; 18
			PORTD |= (parData<<HALF_REGESTER_SIZE);
 292:	82 b3       	in	r24, 0x12	; 18
 294:	90 e1       	ldi	r25, 0x10	; 16
 296:	69 9f       	mul	r22, r25
 298:	b0 01       	movw	r22, r0
 29a:	11 24       	eor	r1, r1
 29c:	68 2b       	or	r22, r24
 29e:	62 bb       	out	0x12, r22	; 18
 2a0:	08 95       	ret

000002a2 <setFallingEdge>:
#include "LCD.h"


static void setFallingEdge(void){
	DIO_vWrite(LCD_PORT,HIGH_VOLT,EN);
 2a2:	43 e0       	ldi	r20, 0x03	; 3
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	82 e4       	ldi	r24, 0x42	; 66
 2a8:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_vWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	87 ee       	ldi	r24, 0xE7	; 231
 2ae:	93 e0       	ldi	r25, 0x03	; 3
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <setFallingEdge+0xe>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <setFallingEdge+0x14>
 2b6:	00 00       	nop
	
	_delay_ms(4);
	DIO_vWrite(LCD_PORT,LOW_VOLT,EN);
 2b8:	43 e0       	ldi	r20, 0x03	; 3
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	82 e4       	ldi	r24, 0x42	; 66
 2be:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_vWrite>
 2c2:	87 ee       	ldi	r24, 0xE7	; 231
 2c4:	93 e0       	ldi	r25, 0x03	; 3
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <setFallingEdge+0x24>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <setFallingEdge+0x2a>
 2cc:	00 00       	nop
 2ce:	08 95       	ret

000002d0 <LCD_vSendCmd>:


#endif

#if defined LCD_4
void LCD_vSendCmd(char cmd){
 2d0:	cf 93       	push	r28
 2d2:	c8 2f       	mov	r28, r24
	/* choose RS */
	DIO_vWrite(LCD_PORT,LOW_VOLT,RS);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	82 e4       	ldi	r24, 0x42	; 66
 2da:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_vWrite>
	
	DIO_vSetHighNibblePortWithHighNibbleData(LCD_DATA_PORT,cmd);
 2de:	6c 2f       	mov	r22, r28
 2e0:	81 e4       	ldi	r24, 0x41	; 65
 2e2:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_vSetHighNibblePortWithHighNibbleData>
	setFallingEdge();
 2e6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <setFallingEdge>
	DIO_vSetHighNibblePortWithLowNibbleData(LCD_DATA_PORT,cmd);
 2ea:	6c 2f       	mov	r22, r28
 2ec:	81 e4       	ldi	r24, 0x41	; 65
 2ee:	0e 94 1a 01 	call	0x234	; 0x234 <DIO_vSetHighNibblePortWithLowNibbleData>
	setFallingEdge();
 2f2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <setFallingEdge>
	
}
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret

000002fa <LCD_vInit>:
void LCD_vInit(void){
	DIO_vSetHighNibbleDirection(LCD_DATA_PORT,0xf0);
 2fa:	60 ef       	ldi	r22, 0xF0	; 240
 2fc:	81 e4       	ldi	r24, 0x41	; 65
 2fe:	0e 94 41 00 	call	0x82	; 0x82 <DIO_vSetHighNibbleDirection>
	DIO_vSetLowNibbleDirection(LCD_PORT,0x0e);
 302:	6e e0       	ldi	r22, 0x0E	; 14
 304:	82 e4       	ldi	r24, 0x42	; 66
 306:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_vSetLowNibbleDirection>
	DIO_vWrite(LCD_PORT,LOW_VOLT,RW);
 30a:	42 e0       	ldi	r20, 0x02	; 2
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	82 e4       	ldi	r24, 0x42	; 66
 310:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_vWrite>

	/* to let LCD work mode */
	LCD_vSendCmd(0x33);
 314:	83 e3       	ldi	r24, 0x33	; 51
 316:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_vSendCmd>
	LCD_vSendCmd(0x32);
 31a:	82 e3       	ldi	r24, 0x32	; 50
 31c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_vSendCmd>
	LCD_vSendCmd(0x28);
 320:	88 e2       	ldi	r24, 0x28	; 40
 322:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_vSendCmd>
	/* blink cursor*/
	LCD_vSendCmd(0x0F);
 326:	8f e0       	ldi	r24, 0x0F	; 15
 328:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_vSendCmd>
	
	/*Clear screen*/
	LCD_vSendCmd(0x01);
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_vSendCmd>
 332:	87 e8       	ldi	r24, 0x87	; 135
 334:	93 e1       	ldi	r25, 0x13	; 19
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <LCD_vInit+0x3c>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <LCD_vInit+0x42>
 33c:	00 00       	nop
 33e:	08 95       	ret

00000340 <LCD_vPrintChar>:
	_delay_ms(20);
}
void LCD_vPrintChar(char parData){
 340:	cf 93       	push	r28
 342:	c8 2f       	mov	r28, r24
	DIO_vWrite(LCD_PORT,HIGH_VOLT,RS);
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	82 e4       	ldi	r24, 0x42	; 66
 34a:	0e 94 7f 00 	call	0xfe	; 0xfe <DIO_vWrite>
	
	DIO_vSetHighNibblePortWithHighNibbleData(LCD_DATA_PORT,parData);
 34e:	6c 2f       	mov	r22, r28
 350:	81 e4       	ldi	r24, 0x41	; 65
 352:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_vSetHighNibblePortWithHighNibbleData>
	setFallingEdge();
 356:	0e 94 51 01 	call	0x2a2	; 0x2a2 <setFallingEdge>
	DIO_vSetHighNibblePortWithLowNibbleData(LCD_DATA_PORT,parData);
 35a:	6c 2f       	mov	r22, r28
 35c:	81 e4       	ldi	r24, 0x41	; 65
 35e:	0e 94 1a 01 	call	0x234	; 0x234 <DIO_vSetHighNibblePortWithLowNibbleData>
	setFallingEdge();
 362:	0e 94 51 01 	call	0x2a2	; 0x2a2 <setFallingEdge>
}
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <LCD_vPrintString>:

void LCD_vPrintString(char* parStr){
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	ec 01       	movw	r28, r24
	
	while(*parStr)
 370:	88 81       	ld	r24, Y
 372:	88 23       	and	r24, r24
 374:	31 f0       	breq	.+12     	; 0x382 <LCD_vPrintString+0x18>
 376:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_vPrintChar(*parStr);
 378:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_vPrintChar>
	setFallingEdge();
}

void LCD_vPrintString(char* parStr){
	
	while(*parStr)
 37c:	89 91       	ld	r24, Y+
 37e:	81 11       	cpse	r24, r1
 380:	fb cf       	rjmp	.-10     	; 0x378 <LCD_vPrintString+0xe>
	{
		LCD_vPrintChar(*parStr);
		parStr++;
	}
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <LCD_vMoveCursir>:

#endif

void LCD_vMoveCursir(unsigned char row,unsigned char col){
	char temp;
	if((row < 2) && (col < 16))
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	68 f4       	brcc	.+26     	; 0x3a6 <LCD_vMoveCursir+0x1e>
 38c:	60 31       	cpi	r22, 0x10	; 16
 38e:	58 f4       	brcc	.+22     	; 0x3a6 <LCD_vMoveCursir+0x1e>
	{
		if(row == 0)
 390:	81 11       	cpse	r24, r1
 392:	05 c0       	rjmp	.+10     	; 0x39e <LCD_vMoveCursir+0x16>
		{
			temp = 0x80 + col;
			LCD_vSendCmd(temp);
 394:	80 e8       	ldi	r24, 0x80	; 128
 396:	86 0f       	add	r24, r22
 398:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_vSendCmd>
 39c:	08 95       	ret
		}
		else
		{
			temp = 0xc0 + col;
			LCD_vSendCmd(temp);
 39e:	80 ec       	ldi	r24, 0xC0	; 192
 3a0:	86 0f       	add	r24, r22
 3a2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_vSendCmd>
 3a6:	08 95       	ret

000003a8 <main>:

#include "LCD.h"

int main(void)
{
	LCD_vInit();
 3a8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_vInit>
	LCD_vMoveCursir(1,4);
 3ac:	64 e0       	ldi	r22, 0x04	; 4
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 c4 01 	call	0x388	; 0x388 <LCD_vMoveCursir>
	LCD_vPrintString("Yara");
 3b4:	80 e6       	ldi	r24, 0x60	; 96
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_vPrintString>
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <main+0x14>

000003be <_exit>:
 3be:	f8 94       	cli

000003c0 <__stop_program>:
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <__stop_program>
